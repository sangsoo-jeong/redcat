     1                                  ; how to compile
     2                                  ; nasm -f elf64 -o test -l test.lst test.asm
     3                                  
     4                                  ;how to linker
     5                                  ; ld --dynamic-linker /lib64/ld-linux-x86-64.so.2 -o test /usr/lib/x86_64-linux-gnu/crtn.o test.o -lc
     6                                  
     7                                  global _start
     8                                  extern printf 
     9                                  extern exit
    10                                  section .data
    11                                  
    12                                  message:
    13 00000000 256C64207820256C64-         db "%ld x %ld = %ld",10,00 ; \x0a\x00 
    13 00000009 203D20256C640A00   
    14 00000011 0200000000000000            i: dq 2 ; long int i = 2
    15 00000019 0100000000000000            j: dq 1 ; long int j = 1
    16 00000021 0900000000000000            max : dq 9 ; long int max = 9
    17                                  
    18                                  end:
    19 00000029 676F6F64206279650A-         db 'good bye',10,00 
    19 00000032 00                 
    20                                  
    21                                  section .text
    22                                  
    23                                  _start:
    24 00000000 55                              push rbp
    25 00000001 4889E5                          mov rbp, rsp
    26 00000004 4883EC20                        sub rsp, 0x20
    27 00000008 EB02                            jmp _init
    28 0000000A 7E14                            jle _row_comp
    29                                  
    30                                  _init:
    31 0000000C 4831C0                          xor rax,rax
    32 0000000F 4831C9                          xor rcx,rcx
    33 00000012 4831D2                          xor rdx,rdx
    34 00000015 4831FF                          xor rdi,rdi
    35 00000018 4831F6                          xor rsi,rsi
    36 0000001B B902000000                      mov rcx, 0x2 ; i value 
    37                                  
    38                                  _row_comp:
    39 00000020 483B0C25[21000000]              cmp rcx,[max]
    40 00000028 7E02                            jle _column_set
    41 0000002A EB5E                            jmp _end
    42                                  
    43                                  _column_set:
    44 0000002C 488B3C25[19000000]              mov rdi, [j] ; y
    45 00000034 EB00                            jmp _column_comp
    46                                  
    47                                  _column_comp:
    48 00000036 483B3C25[21000000]              cmp rdi,[max]
    49 0000003E 7E0A                            jle _calc
    50 00000040 59                              pop rcx
    51 00000041 4C89C9                          mov rcx, r9
    52 00000044 4883C101                        add rcx, 0x1
    53 00000048 EBD6                            jmp _row_comp
    54                                  
    55                                  _calc:
    56 0000004A 4989F8                          mov r8, rdi ; backup (j value)
    57 0000004D 4D89C3                          mov r11,r8 ; backup (j value) twice backup
    58 00000050 4153                            push r11 ; backup j value
    59 00000052 4153                            push r11 ; backup twice 
    60 00000054 4989CE                          mov r14,rcx ; backup (i value)
    61 00000057 4989C9                          mov r9, rcx ; backup (i value) twice backup 
    62 0000005A 4151                            push r9 ; i value 
    63 0000005C 4889C8                          mov rax, rcx
    64 0000005F 480FAFC7                        imul rax, rdi  ; result = x*y , rax == result
    65 00000063 48BF-                           mov rdi, message 
    65 00000065 [0000000000000000] 
    66 0000006D 4C89CE                          mov rsi, r9 
    67 00000070 4C89C2                          mov rdx, r8
    68 00000073 4889C1                          mov rcx, rax
    69 00000076 31C0                            xor eax, eax
    70 00000078 E8(00000000)                    call printf
    71 0000007D 4159                            pop r9 ; recover i value 
    72 0000007F 4C89C9                          mov rcx, r9
    73 00000082 5F                              pop rdi ; recover j value
    74 00000083 58                              pop rax
    75 00000084 4883C701                        add rdi,0x1
    76 00000088 EBAC                            jmp _column_comp        
    77                                          ; 64bit is rdi -> rsi -> rdx -> rcx -> r8 -> r9 
    78                                  _end:
    79 0000008A 4831C0                      xor rax, rax
    80 0000008D 4889C7                      mov rdi, rax
    81 00000090 E8(00000000)                call exit
    82 00000095 5D                          pop rbp
    83 00000096 C3                          ret
